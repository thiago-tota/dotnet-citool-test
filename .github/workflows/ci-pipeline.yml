name: CI Pipeline for MyWebApp Client

on:
  push:
    branches: [ '*' ]  # Trigger on all branches
  pull_request:
    branches: [ '*' ]  # Trigger on PRs to all branches
  workflow_dispatch:  # Allows manual triggering

env:
  DOTNET_VERSION: '9.0.x'  # Matches your .NET 9 project
  IMAGE_NAME: mywebapp-client  # Name for the container image

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --configuration Release --no-restore
      
    - name: Test
      run: dotnet test Tests/MyWebApp.Client.Tests/MyWebApp.Client.Tests.csproj --configuration Release --no-build --verbosity normal
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          MyWebApp.Client/bin/Release/net9.0
          MyWebApp.Client/Dockerfile
          MyWebApp.Client/nginx.conf
        retention-days: 1

  build-and-push-image-jfrog:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup JFrog CLI
      uses: jfrog/setup-jfrog-cli@v4
      env:
        JF_URL: ${{ vars.JF_URL }}
        JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}

    - name: Build Tag and push Docker Image
      env:
        REGISTRY_PATH: thiagotota.jfrog.io/images-local/GitHubActions
        IMAGE_NAME: mywebapp-client
        VERSION_TAG: ${{ github.run_number }}
      run: |
        # Use Docker Buildx for multi-platform builds
        docker buildx create --use
        
        # Define image names with tags
        VERSIONED_IMAGE=${REGISTRY_PATH}/${IMAGE_NAME}:${VERSION_TAG}
        LATEST_IMAGE=${REGISTRY_PATH}/${IMAGE_NAME}:latest
        
        # Build the image with the Blazor WebAssembly app and tag with version
        echo "Building Docker image..."
        jf docker build -f ./MyWebApp.Client/Dockerfile -t ${VERSIONED_IMAGE} -t ${LATEST_IMAGE} .
        
        # Push both tags to JFrog Artifactory
        echo "Pushing versioned tag to JFrog Artifactory..."
        jf docker push ${VERSIONED_IMAGE}
        echo "Pushing latest tag to JFrog Artifactory..."
        jf docker push ${LATEST_IMAGE}
        
        # Output the pushed image details
        echo "Successfully pushed images:"
        echo " - ${VERSIONED_IMAGE}"
        echo " - ${LATEST_IMAGE}"
          
    - name: Publish Build info With JFrog CLI
      env:
        # Generated and maintained by GitHub
        JFROG_CLI_BUILD_NAME: mywebapp-client
        # JFrog organization secret
        JFROG_CLI_BUILD_NUMBER: ${{ github.run_number }}
      run: |
        # Collect environment variables for the build
        jf rt build-collect-env
        # Collect VCS details from git and add them to the build
        jf rt build-add-git
        # Publish build info
        jf rt build-publish